obstacle_range: 2.5
raytrace_range: 3.0
# 这些参数设置放入代价地图的障碍信息的阈值。 
# “obstacle_range”参数决定了引入障碍物到代价地图的传感器读数的最大范围。 
# 在这里,我们把它设定为2.5米,这意味着机器人只会更新以其底盘为中心半径2.5米内的障碍信息。 
# “raytrace_range”参数确定的空白区域内光线追踪的范围。 
# 设置为3.0米意味着机器人将试图根据传感器读数清除其前面3.0米远的空间。


# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]
robot_radius: 0.15
inflation_radius: 0.25 # 原来是0.55
# 这里我们设置机器人的footprint或机器人半径（如果是圆形的）。 
# 指定的footprint时,机器人的中心被认为是在(0.0,0.0),顺时针和逆时针规范都支持。 
# 我们还将设置代价地图膨胀半径。膨胀半径应该设置为障碍物产生代价的最大距离。 
# 例如,膨胀半径设定在0.25米意味着机器人所有路径与障碍物保持0.25米或更的远离（具有同样的代价）。

observation_sources: laser_scan_sensor #point_cloud_sensor
# “observation_sources”参数定义了一系列传递空间信息给代价地图的传感器。每个传感器定义在下一行。

laser_scan_sensor: {sensor_frame: base_laser, data_type: LaserScan, topic: sensor_msgs/LaserScan, marking: true, clearing: true}
# 这一行设置“observation_sources”中提到的传感器。这个例子定义了 laser_scan_sensor。 
# “frame_name”参数应设置为传感器坐标帧的名称，“data_type”参数应设置为LaserScan或PointCloud，
# 这取决于主题使用的消息，“topic_name”应该设置为发布传感器数据的主题的名称。 
# “marking”和“clearing”参数确定传感器是否用于向代价地图添加障碍物信息，或从代价地图清除障碍信息，或两者都有。

# point_cloud_sensor: {sensor_frame: frame_name, data_type: PointCloud, topic: topic_name, marking: true, clearing: true}